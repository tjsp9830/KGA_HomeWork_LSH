
<심화학습 - 메모리와 가비지 컬렉터>
C, C++에서는 프로그래머가 직접 메모리의 할당과 해제를 관리해줘야 했지만, 
C#에서는 자동적으로 힙 메모리를 관리해주는 가비지컬렉터라는 프로세스를 
도입하였습니다. 이로 인해 프로그래머의 편의성은 늘어났지만 가비지 컬렉터의 
동작 방식에 대해서 파악하는 것은 없어서는 안 될 중요한 단계입니다. 아래 링크와 
추가적인 자료를 참고해 과제를 해결하고, 지식을 업그레이드하는 시간을 가져봅시다.


<심화과제 - 가비지 컬렉터에 대해 조사하고 보고서를 제출하시오.>


● 가비지 컬렉터란?

프로그래머가 직접 메모리를 관리해야했던 C, C++과 달리, 
C#에서는 자동적으로 힙 메모리에서 메모리의 할당과 해제를 관리한다.
이것이 가비지 컬렉터이며, 의미없는 데이터를 모아서 버리는 개념이다.
한정된 자원으로 성능의 최적화를 노리기 위해 이에 대한 개념을 익혀야 한다.


● 가비지란?

여기서 의미없는 데이터(=가비지)란 더이상 참조할 수 없게된 객체를 말한다.
call by reference타입의 변수들은 스택 메모리에 담긴 주소값을 이용해 힙 메모리에 접근한다.
이때 함수가 종료되면 지역변수들이 해제되면서 힙을 가리키고 있던 메모리만 두고 스택의 주소값만 사라진다.
이렇게 '입대했더니 본가가 이사를 가버려서 집주소를 적어놨는데, 적어둔 쪽지를 버린 탓에 
본가에 찾아갈 수 없게된 장병' 의 케이스에서 그 접근할 수 없게된 새 집이 가비지라고 이해했다.


● 작동 방식?

C#은 가비지 컬렉터가 힙 영역의 메모리를 세대에 따라 정해진 빈도에 맞게
주기적으로 검사하여, 사용하지 않는 메모리를 자동으로 해제해준다.

이를 위해 프로그램 안에서 계속해서 살아남은 개체에게 세대라는 개념을 부여한다.
세대가 높을수록 검사 빈도를 낮추고, 세대가 낮을수록 검사 빈도를 높인다.

맨 처음엔 메모리를 0세대에 저장하고, 0세대가 꽉 차면 가비지 컬렉션을 진행한 뒤 
걸러진 객체들을 1세대에 저장한다. 이후 같은 동작을 반복하다가 1세대도 꽉 차면
걸러진 객체들을 2세대에 저장한다. 이후 같은 동작을 반복하다가 2세대도 꽉 차면
모든 세대에 대해 가비지 컬렉션을 진행한다. 
이것을 Full GC라고 하며, Full GC의 경우 프로그램을 멈추고 가비지 컬렉션을 하기 때문에
애초에 가비지가 쌓이지 않도록 관리해 줄 필요가 있다.


● 작동 과정?

가비지 컬렉션의 주기가 시작될때, 가비지 콜렉터는 일단 모든 객체를 가비지로 가정한다.
이후 각 항목들이 참조하고 있는것들을 검사해서, 참조에 도달할 수 없는 객체를 가비지로 인식하고 버린다. 
그렇게 한 주기가 끝나면 일부가 버려져서 일부 비어있는 메모리를 압축해 메모리 외부 단편화를 막는다. 
가비지 컬렉션은 이와 같은 과정을 계속 반복하는 것이다.
(메모리 외부 단편화란, 남아있는 공간이 너무 짤짤이여서 총량보다 작은 크기인데도 못넣는것을 말한다.)


● 가비지 컬렉션의 한계점?

1. 실행 시간의 오버헤드 
: 가비지 컬렉터는 메모리를 검사해서 사용하지 않는 메모리를 해제하는 작업을 
프로그램이 돌아가는 와중에 수행하기 때문에 프로그램 성능에 영향을 미칠 수 있다.

2. 메모리 오버헤드 
: 가비지 컬렉터가 메모리를 효율적으로 관리하기 위해서는 
추가적인 메모리가 필요하기 때문에 메모리 사용량이 증가할 수 있다.

3. 예측 불가능한 정지 시간 
: 대규모의 힙 메모리를 사용하는 경우 Full GC가 일어날 수 있는데,
그 경우 가비지 컬렉터가 Full GC를 해결하는 동안 프로그램이 멈춰있을 수 있다.


● 가비지 컬렉션을 줄이기 위한 노력?

1. 객체를 너무 많이 할당하지 않기
: 객체를 많이 생성할수록 메모리가 금방 차서 가비지 컬렉션이 빈번히 일어나기 때문

2. 너무 큰 객체 할당하지 않기
: 객체 용량이 클수록 메모리가 금방 차서 가비지 컬렉션이 빈번히 일어나기 때문

3. 참조 관계를 스파게티로 만들지 않기
: 가비지 컬렉터가 걸러낸 데이터를 세대에 저장할때, 참조 관계가 복잡하면 연산이 많이 일어나 최적화에 방해가 되기 때문

4. 참조타입 자체를 많이 만들지 않기
: 루트를 순회하는 시간을 줄이면 가비지 컬렉션 빈도 자체가 줄어들기 때문


● 가비지 컬렉션을 회피하기 위한 전략?

가비지 컬렉터는 힙 메모리 영역을 관리하기 때문에, 
힙 메모리를 사용하는 참조 타입 인스턴스를 사용을 줄이는 것이 
가비지 컬렉터를 회피하는 핵심 전략이다.

1. 값 타입 인스턴스 사용 
: 값 타입 인스턴스는 기본적으로는 스택 메모리 영역을 사용하기 때문에 
가비지 컬렉터 작동을 회피할 수 있다. 이때, 데이터의 크기가 커지거나 
배열 형태로 생성할 경우 힙 메모리를 사용하므로 주의해야 한다.

2. 오브젝트 풀링 (객체 풀링) 
: 객체 풀링은 객체를 해제하지 않고 풀에서 참조하여 재사용하는 방법이다. 
특정 메모리를 일종의 정적 메모리로 취급하는것이다.
이 방식으로 객체의 생성과 해제를 줄여 가비지 컬렉터를 회피할 수 있으며,
후에 유니티 프로젝트를 만들때에도 프로그램 최적화를 위해서 많이 사용된다.

3. 약한 참조 
: WeakReference 를 이용하여 약한 참조를 하는 방법도 있다. 
WeakReference 를 통해 약한 참조를 하게 됐을때, 
어떤 객체의 강한 참조가 남아있지 않고 약한 참조만 있다면, 
가비지 컬렉터가 해당 객체를 해제한다. 
이 방법은 가비지 컬렉터를 회피하는 방법은 아니지만, 
메모리 사용량을 최적화 하는데 도움을 준다고 한다.



참조자료
1. https://learn.microsoft.com/ko-kr/aspnet/core/performance/memory?view=aspnetcore-7.0
2. https://velog.io/@dohui/C-%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BD%9C%EB%A0%89%ED%84%B0
3. https://kksoo0131.github.io/TIL-61/#:~:text=%EA%B0%80%EB%B9%84%EC%A7%80%20%EC%BB%AC%EB%A0%89%ED%84%B0%EB%9E%80%20C%23%EC%9D%B4%EB%82%98,%EC%95%8A%EC%95%84%EB%8F%84%20%EB%90%98%EA%B2%8C%20%ED%95%B4%EC%A3%BC%EB%8A%94%20%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9E%85%EB%8B%88%EB%8B%A4.&text=%EC%9D%B4%20%ED%8F%AC%EC%9D%B8%ED%84%B0%20%EB%B3%80%EC%88%98%EA%B0%80%20%EB%8B%A4%EB%A5%B8,%EB%A9%94%EB%AA%A8%EB%A6%AC%20%EB%88%84%EC%88%98%EA%B0%80%20%EB%B0%9C%EC%83%9D%ED%95%A9%EB%8B%88%EB%8B%A4.










